# Optimized Docker Compose for Da-Kraken
# Pruned and restructured for security and performance

version: '3.8'

services:
  # Core Services
  bridge-orchestrator:
    build: 
      context: ./bridge-orchestrator
      args:
        NODE_ENV: production
    container_name: da-kraken-bridge
    ports:
      - "4000:4000"
    volumes:
      - shared-volume:/shared:rw
      - ./logs:/app/logs:rw
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - API_RATE_LIMIT=100
      - SECURITY_HEADERS=true
    depends_on:
      - redis
    networks:
      - kraken-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis with security
  redis:
    image: redis:7-alpine
    container_name: da-kraken-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpass}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - kraken-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Development Containers (Optimized)
  nodejs-dev:
    build: 
      context: ./nodejs-container
      target: development
    container_name: da-kraken-nodejs
    ports:
      - "3000:3000"
      - "3001:3001"
    volumes:
      - shared-volume:/shared:rw
      - nodejs-cache:/home/node/.npm
    environment:
      - NODE_ENV=development
      - BRIDGE_ENDPOINT=http://bridge-orchestrator:4000
    networks:
      - kraken-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  python-dev:
    build: 
      context: ./python-container
      target: development
    container_name: da-kraken-python
    ports:
      - "5000:5000"
      - "8000:8000"
    volumes:
      - shared-volume:/shared:rw
      - python-cache:/home/python/.cache
    environment:
      - PYTHONPATH=/workspace
      - BRIDGE_ENDPOINT=http://bridge-orchestrator:4000
    networks:
      - kraken-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Modern Web UI Container
  modern-ui:
    build:
      context: ./modern-ui
      dockerfile: Dockerfile
    container_name: da-kraken-ui
    ports:
      - "8080:80"
    volumes:
      - shared-volume:/shared:ro
    environment:
      - API_ENDPOINT=http://bridge-orchestrator:4000
      - UI_THEME=mechanical-3d
      - SYMBOL_MODE=enabled
    networks:
      - kraken-network
    restart: unless-stopped
    depends_on:
      - bridge-orchestrator
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

networks:
  kraken-network:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  shared-volume:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=1G,uid=1000,gid=1000
  redis-data:
    driver: local
  nodejs-cache:
    driver: local
  python-cache:
    driver: local

# Security and Performance Optimizations
x-security-opts: &security-opts
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp:noexec,nosuid,size=100m

x-logging: &default-logging
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "3"